#!/usr/bin/env python
# Copyright 2020 Zinnotech, all rights reserved

"""
Utility to manipulate the Checklist AI database.
"""

__appname__ = 'spa-db'
__version__ = '0.1.0'

import csv
import optparse
import os
import sys

DIR = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(0, os.path.join(DIR, '..'))

import spa
import spa.dbmanager as dbm
from spa.config import Config


KNOWN_DATA = ['all', 'prediction', 'prediction_history']


def validate_data_options(opt):
    if opt not in KNOWN_DATA:
        print("unknown test_data set '%s'" % opt)
        exit(1)
    return opt


class OptParser(optparse.OptionParser):
    def format_description(self, formatter):
        return self.description


if __name__ == "__main__":
    usage = """%prog ( create-table | drop-table | delete-table | create-test-db | drop-test-db ) [options]"""
    parser = OptParser(usage=usage, description=__doc__)
    spa.add_basic_options(parser)
    spa.add_db_options(parser, dbadm_opts=True)
    parser.add_option("--test_data-file",
                      help="test_data file to be imported into database")
    parser.add_option("--test_data", default='all',
                      help="which test_data to clear: {data}".format(data=KNOWN_DATA))
    parser.add_option("-y", action="store_true", help="do not prompt")
    (options, args) = parser.parse_args()

    if options.version:
        print("version %s (OMS %s)" % (__version__, spa.__version__))
        sys.exit(0)

    spa.setup_logging(appname=__appname__, appvers=__version__,
                      debug=options.debug, filename=options.log_file)

    # first get values from the configuration file
    config_dict = spa.read_config_file(options.config_file)

    # get the database connection information
    db_dict = config_dict.get(Config.SPA_DATABASE, {})
    dbinfo = spa.get_dbinfo(options.db_host, options.db_port, options.db_name,
                            options.db_user, options.db_pass,
                            options.db_admin_user, options.db_admin_pass,
                            db_dict, options.db_uri)
    dbstr = '%s:%s/%s' % (dbinfo['dbhost'], dbinfo['dbport'], dbinfo['dbname'])

    if 'create-table' in args:
        ans = 'y' if options.y else \
            spa.prompt("create table %s (y/n)? " % dbstr)
        if ans == 'y':
            dbm.create_table(**dbinfo)
    elif 'drop-table' in args:
        ans = 'y' if options.y else \
            spa.prompt("drop table, function and trigger %s (y/n)? " % dbstr)
        if ans == 'y':
            dbm.drop_table(**dbinfo)
    elif 'delete-table' in args:
        which_data = validate_data_options(options.data)
        ans = 'y' if options.y else \
            spa.prompt("clear %s from %s (y/n)? " % (which_data, dbstr))
        if ans == 'y':
            dbm.clear_table(which_data=which_data, **dbinfo)
    # database for ai test
    elif 'create-test-db' in args:
        ans = 'y' if options.y else \
            spa.prompt("create test database %s (y/n)? " % dbstr)
        if ans == 'y':
            dbinfo.pop('dbname')
            dbinfo['dbname'] = 'ai_test'
            dbm.create_test_db(**dbinfo)
    elif 'drop-test-db' in args:
        ans = 'y' if options.y else \
            spa.prompt("drop test database %s (y/n)? " % dbstr)
        if ans == 'y':
            dbinfo.pop('dbname')
            dbinfo['dbname'] = 'ai_test'
            dbm.drop_test_db(**dbinfo)
    elif 'create-test-data' in args:
        with open('../test_data/result.csv') as csv_file:
            csv_reader = csv.reader(csv_file, delimiter=',')
            check_list = dict()
            count = 0
            for row in csv_reader:
                check_list[count] = {'report_id': row[0], 'guide_id': row[1], 'result': row[2]}
                count += 1
        dbm.create_test_report(check_list, **dbinfo)

        with open('../test_data/check_list.csv') as csv_file:
            csv_reader = csv.reader(csv_file, delimiter=',')
            check_list = dict()
            count = 0
            for row in csv_reader:
                check_list[count] = {'report_id': row[1], 'step_id': row[2], 'task_id': row[3],
                                     'action_id': row[4], 'result': row[6]}
                count += 1
        dbm.create_test_report_result(check_list, **dbinfo)
    else:
        parser.print_usage()

"""
ALTER TABLE report 
ADD COLUMN result int;

delete from report;
alter sequence report_id_seq restart;

delete from report_result;
alter sequence report_result_id_seq restart;
"""
