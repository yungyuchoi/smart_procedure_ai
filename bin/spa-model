#!/usr/bin/env python
# Copyright 2020 Zinnotech, all rights reserved

"""
Checklist AI Model Maker.
"""

__appname__ = 'spa-model'
__version__ = '0.1.0'


import optparse
import os
import sys


DIR = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(0, os.path.join(DIR, '..'))


import spa
from spa.model_maker import ModelMaker
from spa.config import Config


KNOWN_DATA = []


def validate_data_options(opt):
    if opt not in KNOWN_DATA:
        print("unknown test_data set '%s'" % opt)
        exit(1)
    return opt


class OptParser(optparse.OptionParser):
    def format_description(self, formatter):
        return self.description


if __name__ == "__main__":
    usage = """%prog ( create ) [options]"""
    parser = OptParser(usage=usage, description=__doc__)
    spa.add_basic_options(parser)
    spa.add_db_options(parser, dbadm_opts=True)
    parser.add_option("--guide-id",
                      help="guide_id to be made into model")
    parser.add_option("-y", action="store_true", help="do not prompt")
    (options, args) = parser.parse_args()

    if options.version:
        print("version %s (OMS %s)" % (__version__, spa.__version__))
        sys.exit(0)

    spa.setup_logging(appname=__appname__, appvers=__version__,
                      debug=options.debug, filename=options.log_file)

    # first get values from the configuration file
    config_dict = spa.read_config_file(options.config_file)

    # get the database connection information
    db_dict = config_dict.get(Config.SPA_DATABASE, {})
    dbinfo = spa.get_dbinfo(options.db_host, options.db_port, options.db_name,
                            options.db_user, options.db_pass,
                            options.db_admin_user, options.db_admin_pass,
                            db_dict, options.db_uri)
    dbstr = '%s:%s/%s' % (dbinfo['dbhost'], dbinfo['dbport'], dbinfo['dbname'])

    if 'create' in args:
        if options.guide_id:
            ans = 'y' if options.y else \
                spa.prompt("create model of guide %s (y/n)? " % options.guide_id)
            if ans == 'y':
                ModelMaker().make_model(options.guide_id, **dbinfo)
        else:
            print("guide_id should be specified")
    else:
        parser.print_usage()
